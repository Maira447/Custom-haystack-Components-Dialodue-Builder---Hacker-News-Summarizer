# -*- coding: utf-8 -*-
"""Dialogue Builde & Haystack news summarizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BVaUHq8tvEmkItGyKrb1A345NAxujGKy

**Dialogue Builder:**
"""

!pip install helper

!pip install python-dotenv # install the python-dotenv package

import warnings
from dotenv import load_dotenv # import the function from the dotenv package

warnings.filterwarnings('ignore')
load_dotenv()

# Add your utilities or helper functions to this file.

import os
from dotenv import load_dotenv, find_dotenv

# these expect to find a .env file at the directory above the lesson.                                                                                                                     # the format for that file is (without the comment)                                                                                                                                       #API_KEYNAME=AStringThatIsTheLongAPIKeyFromSomeService
def load_env():
    _ = load_dotenv(find_dotenv())

!pip install python-dotenv==1.0.1 haystack-ai==2.2.4 haystack-experimental==0.1.0 sentence-transformers==3.0.1 transformers==4.42.3 gradio==4.37.2 huggingface_hub==0.23.4 cohere-haystack==1.1.3 newspaper3k==0.2.8 colorama==0.4.6 trafilatura==1.11.0

import requests

from typing import List

from haystack import Document, Pipeline, component
from haystack.components.builders import PromptBuilder
from haystack.components.generators.openai import OpenAIGenerator
from haystack.utils import Secret
from haystack.components.fetchers import LinkContentFetcher
from haystack.components.converters import HTMLToDocument

"""Build The **Component**:"""

@component
class Greeter:

    @component.output_types(greeting=str)
    def run(self, user_name: str):
        return {"greeting": f"Hello {user_name}"}

greeter = Greeter()

greeter.run(user_name="Maira")

import os
from haystack.components.generators import OpenAIGenerator

# Set the OpenAI API key in the environment
os.environ['OPENAI_API_KEY'] = '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'

# Initialize the OpenAIGenerator without passing the API key directly
llm = OpenAIGenerator()

# Continue with your pipeline setup...

"""**Add Component to a pipeline:**"""

greeter = Greeter()
template = """ You will be given the beginning of a dialogue.
Create a short play script using this as the start of the play.
Start of dialogue: {{ dialogue }}
Full script:
"""
prompt = PromptBuilder(template=template)
llm = OpenAIGenerator()

dialogue_builder = Pipeline()
dialogue_builder.add_component("greeter", greeter)
dialogue_builder.add_component("prompt", prompt)
dialogue_builder.add_component("llm", llm)

dialogue_builder.connect("greeter.greeting", "prompt.dialogue")
dialogue_builder.connect("prompt", "llm")

llm = OpenAIGenerator(api_key=Secret.from_env_var("OPENAI_API_KEY"),
                            model="meta-llama/Llama-3-70b-chat-hf",
                            api_base_url="https://api.together.xyz/v1")

"""**Run the component:**"""

def run_dialogue(user_name):
    try:
        # Assuming dialogue_builder is a valid object with a .run() method
        dialogue = dialogue_builder.run({"greeter": {"user_name": user_name}})
        return dialogue["llm"]["replies"][0].strip()
    except Exception as e:
        return f"An error occurred: {e}"

# Example usage
print(run_dialogue("Maira"))

"""**Hacker News Summarizer:**"""

trending_list = requests.get(
        url="https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty"
    )
post = requests.get(
    url=f"https://hacker-news.firebaseio.com/v0/item/{trending_list.json()[0]}.json?print=pretty"
)

print(post.json())

@component
class HackernewsNewestFetcher:
    @component.output_types(articles=List[Document])
    def run(self, top_k: int):
        articles = []
        return {"articles": articles}

@component
class HackernewsNewestFetcher:
    def __init__(self):
        fetcher = LinkContentFetcher()
        converter = HTMLToDocument()

        html_conversion_pipeline = Pipeline()
        html_conversion_pipeline.add_component("fetcher", fetcher)
        html_conversion_pipeline.add_component("converter", converter)

        html_conversion_pipeline.connect("fetcher", "converter")
        self.html_pipeline = html_conversion_pipeline

    @component.output_types(articles=List[Document])
    def run(self, top_k: int):
        articles = []
        trending_list = requests.get(
            url="https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty"
        )
        for id in trending_list.json()[0:top_k]:
            post = requests.get(
                url=f"https://hacker-news.firebaseio.com/v0/item/{id}.json?print=pretty"
            )
            if "url" in post.json():
                try:
                    article = self.html_pipeline.run(
                        {"fetcher": {"urls": [post.json()["url"]]}}
                    )
                    articles.append(article["converter"]["documents"][0])
                except:
                    print(f"Can't download {post}, skipped")
            elif "text" in post.json():
                try:
                    articles.append(Document(content=post.json()["text"], meta= {"title": post.json()["title"]}))
                except:
                    print(f"Can't download {post}, skipped")
        return {"articles": articles}

fetcher = HackernewsNewestFetcher()
results = fetcher.run(top_k=3)

print(results['articles'])

prompt_template = """
You will be provided a few of the top posts in HackerNews.
For each post, provide a brief summary if possible.

Posts:
{% for article in articles %}
  Post:\n
  {{ article.content}}
{% endfor %}
"""

prompt_builder = PromptBuilder(template=prompt_template)
fetcher = HackernewsNewestFetcher()
llm = OpenAIGenerator()

summarizer_pipeline = Pipeline()
summarizer_pipeline.add_component("fetcher", fetcher)
summarizer_pipeline.add_component("prompt", prompt_builder)
summarizer_pipeline.add_component("llm", llm)

summarizer_pipeline.connect("fetcher.articles", "prompt.articles")
summarizer_pipeline.connect("prompt", "llm")

summarizer_pipeline.show()

prompt_template = """
You will be provided a few of the top posts in HackerNews, followed by their URL.
For each post, provide a brief summary followed by the URL the full post can be found at.

Posts:
{% for article in articles %}
  {{ article.content }}
  URL: {{ article.meta["url"] }}
{% endfor %}
"""

prompt_builder = PromptBuilder(template=prompt_template)
fetcher = HackernewsNewestFetcher()
llm = OpenAIGenerator()

summarizer_pipeline = Pipeline()
summarizer_pipeline.add_component("fetcher", fetcher)
summarizer_pipeline.add_component("prompt", prompt_builder)
summarizer_pipeline.add_component("llm", llm)

summarizer_pipeline.connect("fetcher.articles", "prompt.articles")
summarizer_pipeline.connect("prompt", "llm")

def summarize_text():
    try:
        summaries = summarizer_pipeline.run({"fetcher": {"top_k": 2}})
        return summaries["llm"]["replies"][0].strip()
    except Exception as e:
        return f"An error occurred: {e}"

# Example usage
print(summarize_text())